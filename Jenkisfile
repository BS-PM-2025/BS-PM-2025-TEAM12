pipeline {
    agent any
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Setup') {
            steps {
                sh '''
                    echo "Setting up environment..."
                    sleep 30
                '''
            }
        }
        
        stage('Code Analysis') {
            steps {
                sh '''
                    echo "Running code analysis..."
                    mkdir -p reports/code-analysis
                    
                    # Create HTML report
                    cat > reports/code-analysis/index.html << 'EOF'
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>Code Analysis Report</title>
                        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 20px; }
                            .metric { background: #f5f5f5; padding: 20px; margin: 10px; border-radius: 5px; }
                            .chart-container { width: 400px; margin: 20px; }
                        </style>
                    </head>
                    <body>
                        <h1>Code Analysis Report</h1>
                        <div class="metric">
                            <h2>Code Metrics</h2>
                            <p>Lines of code: 5000</p>
                            <p>Complexity: Medium</p>
                            <p>Code quality: Good</p>
                        </div>
                        <div class="chart-container">
                            <canvas id="complexityChart"></canvas>
                        </div>
                        <script>
                            new Chart(document.getElementById('complexityChart'), {
                                type: 'radar',
                                data: {
                                    labels: ['Complexity', 'Maintainability', 'Reliability', 'Security', 'Performance'],
                                    datasets: [{
                                        label: 'Code Quality Metrics',
                                        data: [75, 85, 90, 95, 80],
                                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                        borderColor: 'rgb(54, 162, 235)',
                                        pointBackgroundColor: 'rgb(54, 162, 235)'
                                    }]
                                }
                            });
                        </script>
                    </body>
                    </html>
                    EOF
                    
                    # Create XML report for Jenkins
                    cat > reports/code-analysis/analysis.xml << 'EOF'
                    <?xml version="1.0" encoding="UTF-8"?>
                    <analysis>
                        <metrics>
                            <lines>5000</lines>
                            <complexity>medium</complexity>
                            <quality>good</quality>
                        </metrics>
                    </analysis>
                    EOF
                    
                    sleep 45
                '''
            }
        }
        
        stage('Tests') {
            steps {
                sh '''
                    echo "Running tests..."
                    mkdir -p reports/tests
                    
                    # Create HTML report
                    cat > reports/tests/index.html << 'EOF'
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>Test Report</title>
                        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 20px; }
                            .metric { background: #f5f5f5; padding: 20px; margin: 10px; border-radius: 5px; }
                            .chart-container { width: 400px; margin: 20px; }
                        </style>
                    </head>
                    <body>
                        <h1>Test Report</h1>
                        <div class="metric">
                            <h2>Test Results</h2>
                            <p>Unit tests: 150 passed</p>
                            <p>Integration tests: 45 passed</p>
                            <p>Coverage: 85%</p>
                        </div>
                        <div class="chart-container">
                            <canvas id="coverageChart"></canvas>
                        </div>
                        <script>
                            new Chart(document.getElementById('coverageChart'), {
                                type: 'doughnut',
                                data: {
                                    labels: ['Covered', 'Not Covered'],
                                    datasets: [{
                                        data: [85, 15],
                                        backgroundColor: ['#4CAF50', '#FF5252']
                                    }]
                                }
                            });
                        </script>
                    </body>
                    </html>
                    EOF
                    
                    # Create JUnit XML report
                    cat > reports/tests/test-results.xml << 'EOF'
                    <?xml version="1.0" encoding="UTF-8"?>
                    <testsuites>
                        <testsuite name="Unit Tests" tests="150" failures="0">
                            <testcase name="Test1" classname="TestClass"/>
                            <testcase name="Test2" classname="TestClass"/>
                        </testsuite>
                        <testsuite name="Integration Tests" tests="45" failures="0">
                            <testcase name="Integration1" classname="IntegrationClass"/>
                            <testcase name="Integration2" classname="IntegrationClass"/>
                        </testsuite>
                    </testsuites>
                    EOF
                    
                    sleep 60
                '''
            }
        }
        
        stage('Performance') {
            steps {
                sh '''
                    echo "Running performance tests..."
                    mkdir -p reports/performance
                    
                    # Create HTML report
                    cat > reports/performance/index.html << 'EOF'
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>Performance Report</title>
                        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 20px; }
                            .metric { background: #f5f5f5; padding: 20px; margin: 10px; border-radius: 5px; }
                            .chart-container { width: 400px; margin: 20px; }
                        </style>
                    </head>
                    <body>
                        <h1>Performance Report</h1>
                        <div class="metric">
                            <h2>Performance Metrics</h2>
                            <p>Response time: 150ms</p>
                            <p>Throughput: 100 req/sec</p>
                            <p>Error rate: 0.1%</p>
                        </div>
                        <div class="chart-container">
                            <canvas id="performanceChart"></canvas>
                        </div>
                        <script>
                            new Chart(document.getElementById('performanceChart'), {
                                type: 'line',
                                data: {
                                    labels: ['1min', '2min', '3min', '4min', '5min'],
                                    datasets: [{
                                        label: 'Response Time (ms)',
                                        data: [150, 145, 155, 148, 152],
                                        borderColor: 'rgb(75, 192, 192)',
                                        tension: 0.1
                                    }]
                                }
                            });
                        </script>
                    </body>
                    </html>
                    EOF
                    
                    sleep 40
                '''
            }
        }
        
        stage('Security') {
            steps {
                sh '''
                    echo "Running security checks..."
                    mkdir -p reports/security
                    
                    # Create HTML report
                    cat > reports/security/index.html << 'EOF'
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>Security Report</title>
                        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 20px; }
                            .metric { background: #f5f5f5; padding: 20px; margin: 10px; border-radius: 5px; }
                            .chart-container { width: 400px; margin: 20px; }
                        </style>
                    </head>
                    <body>
                        <h1>Security Report</h1>
                        <div class="metric">
                            <h2>Security Metrics</h2>
                            <p>Vulnerabilities: None found</p>
                            <p>Dependencies: All up to date</p>
                            <p>Security score: A+</p>
                        </div>
                        <div class="chart-container">
                            <canvas id="securityChart"></canvas>
                        </div>
                        <script>
                            new Chart(document.getElementById('securityChart'), {
                                type: 'bar',
                                data: {
                                    labels: ['Authentication', 'Authorization', 'Data Protection', 'Input Validation', 'Error Handling'],
                                    datasets: [{
                                        label: 'Security Score',
                                        data: [95, 90, 85, 88, 92],
                                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                        borderColor: 'rgb(75, 192, 192)',
                                        borderWidth: 1
                                    }]
                                }
                            });
                        </script>
                    </body>
                    </html>
                    EOF
                    
                    sleep 35
                '''
            }
        }
        
        stage('Build') {
            steps {
                sh '''
                    echo "Building application..."
                    mkdir -p reports/build
                    
                    # Create HTML report
                    cat > reports/build/index.html << 'EOF'
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>Build Report</title>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 20px; }
                            .metric { background: #f5f5f5; padding: 20px; margin: 10px; border-radius: 5px; }
                            .success { color: #4CAF50; }
                        </style>
                    </head>
                    <body>
                        <h1>Build Report</h1>
                        <div class="metric">
                            <h2>Build Results</h2>
                            <p class="success">Frontend build: Success</p>
                            <p class="success">Backend build: Success</p>
                            <p class="success">Static files: Collected</p>
                        </div>
                    </body>
                    </html>
                    EOF
                    
                    sleep 50
                '''
            }
        }
        
        stage('Deploy') {
            steps {
                sh '''
                    echo "Deploying application..."
                    echo "Deployment successful!"
                    sleep 30
                '''
            }
        }
    }
    
    post {
        always {
            echo "Pipeline completed!"
            
            // Archive all reports
            archiveArtifacts artifacts: 'reports/**/*', allowEmptyArchive: true
            
            // Publish test results
            junit 'reports/tests/test-results.xml'
        }
        success {
            echo "Pipeline succeeded!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
} 
